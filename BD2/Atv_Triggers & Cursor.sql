/* TRABALHO BD2 - Procedure Carrinho de Compras */

USE CLASSICMODELS;

CREATE TABLE Carrinho(
    idProduto VARCHAR(50),
    Qtde INT,
    Preco DECIMAL(10, 2),
    idCliente INT
);

SELECT * FROM CLASSICMODELS.CUSTOMERS WHERE SALESREPEMPLOYEENUMBER IS NOT NULL;

SELECT * FROM CLASSICMODELS.EMPLOYEES WHERE JOBTITLE = 'SALES REP';

SELECT * FROM CLASSICMODELS.PRODUCTS;

DELIMITER $

CREATE PROCEDURE Gerar_Pedido(IN PARAM_idCliente INT, IN PARAM_idVendedor INT, OUT Resultado VARCHAR(200))
iclv:BEGIN

    DECLARE idCliente_Carrinho INT;
    DECLARE numPedido INT;
    DECLARE codProduto VARCHAR(15);
    DECLARE Qtde INT;
    DECLARE Preco DECIMAL(10, 2);
    DECLARE Contador INT DEFAULT 0;

	-- Declara um cursor para selecionar produtos no carrinho do cliente
    DECLARE c_Carrinho CURSOR FOR
        SELECT codProduto, Qtde, Preco 
        FROM Carrinho 
        WHERE idCliente = PARAM_idCliente;
  
    -- Manipulador para definir a variável 'done' quando não houver mais linhas no cursor
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET Contador = 1;
  
    IF NOT EXISTS (SELECT CUSTOMERNUMBER FROM CUSTOMERS WHERE CUSTOMERNUMBER = PARAM_idCliente) THEN
        SET Resultado = 'CLIENTE NÃO EXISTENTE';
        LEAVE iclv;
    END IF;
  
    IF NOT EXISTS (SELECT EMPLOYEENUMBER FROM EMPLOYEES WHERE EMPLOYEENUMBER = PARAM_idVendedor) THEN
        SET Resultado = 'VENDEDOR NÃO EXISTENTE';
        LEAVE iclv;
    END IF;
  
    IF NOT EXISTS (SELECT idCliente FROM Carrinho WHERE idCliente = PARAM_idCliente) THEN
        SET Resultado = 'CLIENTE NÃO FEZ COMPRAS EM SEU CARRINHO';
        LEAVE iclv;
    END IF;
  
    START TRANSACTION;
  
    INSERT INTO ORDERS (
        ORDERDATE, 
        REQUIREDDATE, 
        STATUS, 
        CUSTOMERNUMBER
    ) VALUES (
        CURDATE(), 
        DATE_ADD(CURDATE(), INTERVAL 7 DAY), 
        'IN PROCESS', 
        PARAM_idCliente
    );
  
    SET numPedido = LAST_INSERT_ID();
    
    -- Abre o cursor para iterar pelos itens do carrinho
    OPEN c_Carrinho;
    
	-- Loop para processar cada item no carrinho
    REPEAT

		-- Busca dados do próximo item no carrinho
        FETCH c_Carrinho INTO codProduto, Qtde, Preco;
        
		-- Sai do loop se não houver mais itens
        IF Contador = 1 THEN
            LEAVE iclv;
        END IF;
        
		-- Chama o procedimento para gerar o item do pedido
        CALL Gerar_Item_Pedido(codProduto, Qtde, Preco, numPedido);
    
    -- Até que o contador atinja o valor de 1
    UNTIL Contador = 1

    END REPEAT;
	
    -- Fecha o cursor após o processamento
    CLOSE c_Carrinho;       
       
    UPDATE CUSTOMERS
    SET SALESREPEMPLOYEENUMBER = PARAM_idVendedor
    WHERE CUSTOMERNUMBER = PARAM_idCliente;
    
    SET Resultado = CONCAT('CRIADO O PEDIDO DE NÚMERO: ', numPedido);
    
    COMMIT;
    
    LEAVE iclv;

END$   

CREATE PROCEDURE Gerar_Item_Pedido(
    IN PARAM_codProduto VARCHAR(15), 
    IN PARAM_Qtde INT, 
    IN PARAM_Preco DECIMAL(10, 2), 
    IN PARAM_numPedido INT
)
BEGIN
    DECLARE exProduto INT;

    SELECT COUNT(*) INTO exProduto 
    FROM PRODUCTS 
    WHERE PRODUCTCODE = PARAM_codProduto;
    
    IF exProduto = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'PRODUTO NÃO ENCONTRADO';
    END IF;

    IF PARAM_Qtde <= 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'QUANTIDADE NÃO PERMITIDA';
    END IF;

    INSERT INTO ORDERDETAILS (
        ORDERNUMBER, 
        PRODUCTCODE, 
        QUANTITYORDERED, 
        PRICEEACH, 
        ORDERLINENUMBER
    ) VALUES (
        PARAM_NUMEROPEDIDO, 
        PARAM_CODIGOPRODUTO, 
        PARAM_QUANTIDADE, 
        PARAM_PRECO, 
        (SELECT IFNULL(MAX(ORDERLINENUMBER), 0) + 1 FROM ORDERDETAILS WHERE ORDERNUMBER = PARAM_numPedido)
    );

    UPDATE PRODUCTS
    SET QUANTITYINSTOCK = QUANTITYINSTOCK - PARAM_Qtde
    WHERE PRODUCTCODE = PARAM_codProduto;

END$ 

-- Trigger para registrar inserções na tabela ORDERS
CREATE TRIGGER depois_inserir_pedidos
AFTER INSERT ON ORDERS
FOR EACH ROW
BEGIN
    INSERT INTO LOG_PEDIDOS (TIPO_ACAO, NUMERO_PEDIDO, DATA_PEDIDO, DATA_REQUERIDA, STATUS, NUMERO_CLIENTE)
    VALUES ('INSERCAO', NEW.ORDERNUMBER, NEW.ORDERDATE, NEW.REQUIREDDATE, NEW.STATUS, NEW.CUSTOMERNUMBER);
END$

-- Trigger para registrar atualizações na tabela ORDERS
CREATE TRIGGER depois_atualizar_pedidos
AFTER UPDATE ON ORDERS
FOR EACH ROW
BEGIN
    INSERT INTO LOG_PEDIDOS (TIPO_ACAO, NUMERO_PEDIDO, DATA_PEDIDO, DATA_REQUERIDA, STATUS, NUMERO_CLIENTE)
    VALUES ('ATUALIZACAO', NEW.ORDERNUMBER, NEW.ORDERDATE, NEW.REQUIREDDATE, NEW.STATUS, NEW.CUSTOMERNUMBER);
END$

-- Trigger para registrar inserções na tabela ORDERDETAILS
CREATE TRIGGER depois_inserir_detalhes_pedido
AFTER INSERT ON ORDERDETAILS
FOR EACH ROW
BEGIN
    INSERT INTO LOG_DETALHES_PEDIDO (TIPO_ACAO, NUMERO_PEDIDO, CODIGO_PRODUTO, QUANTIDADE_PEDIDA, PRECO_UNITARIO, NUMERO_LINHA_PEDIDO)
    VALUES ('INSERCAO', NEW.ORDERNUMBER, NEW.PRODUCTCODE, NEW.QUANTITYORDERED, NEW.PRICEEACH, NEW.ORDERLINENUMBER);
END$

-- Trigger para registrar atualizações na tabela ORDERDETAILS
CREATE TRIGGER depois_atualizar_detalhes_pedido
AFTER UPDATE ON ORDERDETAILS
FOR EACH ROW
BEGIN
    INSERT INTO LOG_DETALHES_PEDIDO (TIPO_ACAO, NUMERO_PEDIDO, CODIGO_PRODUTO, QUANTIDADE_PEDIDA, PRECO_UNITARIO, NUMERO_LINHA_PEDIDO)
    VALUES ('ATUALIZACAO', NEW.ORDERNUMBER, NEW.PRODUCTCODE, NEW.QUANTITYORDERED, NEW.PRICEEACH, NEW.ORDERLINENUMBER);
END$

-- Trigger para registrar inserções na tabela CUSTOMERS
CREATE TRIGGER depois_inserir_clientes
AFTER INSERT ON CUSTOMERS
FOR EACH ROW
BEGIN
    INSERT INTO LOG_CLIENTES (TIPO_ACAO, NUMERO_CLIENTE, NOME_CLIENTE, NUMERO_VENDEDOR)
    VALUES ('INSERCAO', NEW.CUSTOMERNUMBER, NEW.CUSTOMERNAME, NEW.SALESREPEMPLOYEENUMBER);
END$

-- Trigger para registrar atualizações na tabela CUSTOMERS
CREATE TRIGGER depois_atualizar_clientes
AFTER UPDATE ON CUSTOMERS
FOR EACH ROW
BEGIN
    INSERT INTO LOG_CLIENTES (TIPO_ACAO, NUMERO_CLIENTE, NOME_CLIENTE, NUMERO_VENDEDOR)
    VALUES ('ATUALIZACAO', NEW.CUSTOMERNUMBER, NEW.CUSTOMERNAME, NEW.SALESREPEMPLOYEENUMBER);
END$

-- Trigger para registrar inserções na tabela PRODUCTS
CREATE TRIGGER depois_inserir_produtos
AFTER INSERT ON PRODUCTS
FOR EACH ROW
BEGIN
    INSERT INTO LOG_PRODUTOS (TIPO_ACAO, CODIGO_PRODUTO, NOME_PRODUTO, QUANTIDADE_ESTOQUE)
    VALUES ('INSERCAO', NEW.PRODUCTCODE, NEW.PRODUCTNAME, NEW.QUANTITYINSTOCK);
END$

-- Trigger para registrar atualizações na tabela PRODUCTS
CREATE TRIGGER depois_atualizar_produtos
AFTER UPDATE ON PRODUCTS
FOR EACH ROW
BEGIN
    INSERT INTO LOG_PRODUTOS (TIPO_ACAO, CODIGO_PRODUTO, NOME_PRODUTO, QUANTIDADE_ESTOQUE)
    VALUES ('ATUALIZACAO', NEW.PRODUCTCODE, NEW.PRODUCTNAME, NEW.QUANTITYINSTOCK);
END$

DELIMITER ;

-- Tabela de log para a tabela ORDERS
CREATE TABLE LOG_PEDIDOS (
    ID_LOG INT AUTO_INCREMENT PRIMARY KEY,
    TIPO_ACAO VARCHAR(10), -- 'INSERCAO' ou 'ATUALIZACAO'
    NUMERO_PEDIDO INT,
    DATA_PEDIDO DATE,
    DATA_REQUERIDA DATE,
    STATUS VARCHAR(50),
    NUMERO_CLIENTE INT,
    DATA_LOG TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela de log para a tabela ORDERDETAILS
CREATE TABLE LOG_DETALHES_PEDIDO (
    ID_LOG INT AUTO_INCREMENT PRIMARY KEY,
    TIPO_ACAO VARCHAR(10), -- 'INSERCAO' ou 'ATUALIZACAO'
    NUMERO_PEDIDO INT,
    CODIGO_PRODUTO VARCHAR(15),
    QUANTIDADE_PEDIDA INT,
    PRECO_UNITARIO DECIMAL(10, 2),
    NUMERO_LINHA_PEDIDO INT,
    DATA_LOG TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela de log para a tabela CUSTOMERS
CREATE TABLE LOG_CLIENTES (
    ID_LOG INT AUTO_INCREMENT PRIMARY KEY,
    TIPO_ACAO VARCHAR(10), -- 'INSERCAO' ou 'ATUALIZACAO'
    NUMERO_CLIENTE INT,
    NOME_CLIENTE VARCHAR(100),
    NUMERO_VENDEDOR INT,
    DATA_LOG TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela de log para a tabela PRODUCTS
CREATE TABLE LOG_PRODUTOS (
    ID_LOG INT AUTO_INCREMENT PRIMARY KEY,
    TIPO_ACAO VARCHAR(10), -- 'INSERCAO' ou 'ATUALIZACAO'
    CODIGO_PRODUTO VARCHAR(15),
    NOME_PRODUTO VARCHAR(100),
    QUANTIDADE_ESTOQUE INT,
    DATA_LOG TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
